# time complexity - O(N)
# плюсы -
# минусы - менее эффективной для больших данных

def find_first_zero(arr, i):
    if i == len(arr):
        return -1
    if arr[i] == 0:
        return i
    return find_first_zero(arr, i + 1)

arr = [1000.0, 986.49, 972.98, 959.46, 945.95, 932.44, 918.93, 905.41, 891.90, 878.39,
864.88, 851.37, 837.85, 824.34, 810.83, 797.32, 783.81, 770.29, 756.78, 743.27,
729.76, 716.24, 702.73, 689.22, 675.71, 662.20, 648.68, 635.17, 621.66, 608.15,
594.64, 581.12, 567.61, 554.10, 540.59, 527.07, 513.56, 500.05, 486.54, 473.03,
459.51, 446.00, 432.49, 418.98, 405.46, 391.95, 378.44, 364.93, 351.42, 337.90,
324.39, 310.88, 297.37, 283.86, 270.34, 256.83, 243.32, 229.81, 216.29, 202.78,
189.27, 175.76, 162.25, 148.73, 135.22, 121.71, 108.20, 94.69, 81.17, 67.66,
54.15, 40.64, 27.12, 13.61, 0.10, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]

print(find_first_zero(arr, 0))